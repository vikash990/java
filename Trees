import java.util.*;
class node{
    int data;
    node left;
    node right;

    node(int data){
        this.data=data;
        left=right=null;
    }
}

public class TressEg {

    static void preOrder(node root){
       if(root==null)
           return;
        System.out.print(root.data+" ");
        preOrder(root.left);
        preOrder(root.right);
    }

    static void postOrder(node root){
        if(root==null)
            return;
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.data+" ");
    }
    
    static void inOrder(node root){
      if(root==null)
        return;
      inOrder(root.left);
      System.out.print(root.data+" ");
      inOrder(root.right);
    }
    
    static void levelOrder(node root){
      if(root==null)
        return;
      Queue<node> qt=new LinkedList<>();
      qt.add(root);
      while(!qt.isEmpty()){
        node current = qt.poll();
        System.out.print(current.data+" ");
        if(current.left!=null){
          qt.add(current.left);
        }
        if(current.right!=null){
          qt.add(current.right);
        }
      }
      
    }
    
    
    
    static int height(node root){
      if(root==null)
       return -1;
      
      int leftHeight=height(root.left);
      int rightHeight=height(root.right);
      
      return Math.max(leftHeight,rightHeight)+1;
    }
    
    static int sum(node root){
      if (root ==null) return 0;
      return root.data+sum(root.left)+sum(root.right);
    }

    static node root;
    public static void main(String[] args) {
        root=new node(10);
        root.left=new node(11);
        root.right=new node(12);
        root.left.left=new node(13);
        root.left.right=new node(14);
        root.right.left=new node(15);
        root.right.right=new node(16);
        root.right.right.right=new node(19);
        System.out.println();
        System.out.print("Per Order:- ");
        preOrder(root);
        System.out.println();
        System.out.print("Post Order:- ");
        postOrder(root);
        System.out.println();
        System.out.print("In Order:- ");
        inOrder(root);
        System.out.println();
        System.out.print("Level Order:- ");
        levelOrder(root);
        System.out.println();
        System.out.println("The height of tree "+height(root));
        System.out.println("The Sum  of tree "+sum(root));


        
    }
}
